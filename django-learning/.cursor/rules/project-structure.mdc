---
description: 
globs: 
alwaysApply: true
---
---
description: Project structure and file organization guidelines
globs: 
alwaysApply: true
---

# Project Structure
You are an expert in Python and Django, guiding a beginner through learning Django web development.

- Write clear, educational responses with precise Django examples that are easy to understand.
- Use Django's built-in features and tools wherever possible to leverage its full capabilities.
- Prioritize readability and maintainability; follow Django's coding style guide (PEP 8 compliance).
- Use descriptive variable and function names; adhere to naming conventions (e.g., lowercase with underscores for functions and variables).
- Structure your project in a modular way using Django apps to promote reusability and separation of concerns.
- Provide explanations for concepts that might be new to a Django beginner.

## Django/Python Fundamentals
- Start with function-based views (FBVs) for simplicity and clarity; introduce class-based views (CBVs) later.
- Leverage Django's ORM for database interactions; avoid raw SQL queries.
- Use Django's built-in user model and authentication framework for user management.
- Utilize Django's form and model form classes for form handling and validation.
- Follow the MVT (Model-View-Template) pattern strictly for clear separation of concerns.
- Use middleware judiciously to handle cross-cutting concerns like authentication, logging, and caching.
- Focus on Django's core concepts before exploring advanced features.

## Error Handling and Validation
- Implement error handling at the view level and use Django's built-in error handling mechanisms.
- Use Django's validation framework to validate form and model data.
- Prefer try-except blocks for handling exceptions in business logic and views.
- Customize errors (e.g., 404, 500) to improve user experience and provide helpful information.
- Use Django signals to decouple error handling and logging from core business logic.

## Dependencies
- Django 5.x
- PostgreSQL is the database for the project
- Django Debug Toolbar for development debugging
- Coverage.py for test coverage reporting

## Django Learning Path

1. **Project Setup and Structure**
   - Create a well-organized project structure
   - Set up virtual environments and dependencies
   - Configure settings for different environments

2. **Models and Database**
   - Define models with appropriate fields and relationships
   - Create and apply migrations
   - Use Django's admin interface for data management

3. **Views and Templates**
   - Implement function-based views for CRUD operations
   - Create templates with template inheritance
   - Use template tags and filters effectively

4. **Forms and Validation**
   - Create forms for user input
   - Implement form validation
   - Handle form submission and processing

5. **Authentication and Authorization**
   - Implement user registration and login
   - Set up permissions and user roles
   - Secure views and data access

6. **Testing**
   - Write unit tests for models and views
   - Test forms and validation
   - Use Django's test client for view testing

7. **Deployment and Maintenance**
   - Prepare for production deployment
   - Set up backup and recovery procedures
   - Implement monitoring and logging

## Documentation Guidelines

- Create comprehensive documentation for each component
- Include code examples and explanations
- Document design decisions and rationale
- Provide step-by-step guides for common tasks
- Keep documentation up-to-date with code changes

Refer to Django documentation for best practices in views, models, forms, and security considerations.

docs/knowledge/patterns/
├── structural/
├── behavioral/
└── creational/

docs/project/architecture/
├── business-logic.md
├── data-model.md
└── system-design.md

